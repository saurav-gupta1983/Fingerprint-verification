/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_neurotechnology_Nffv_Nffv */

#ifndef _Included_com_neurotechnology_Nffv_Nffv
#define _Included_com_neurotechnology_Nffv_Nffv
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_neurotechnology_Nffv_Nffv
 * Method:    getAvailableScannerModules0
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_neurotechnology_Nffv_Nffv_getAvailableScannerModules0
  (JNIEnv *, jclass);

/*
 * Class:     com_neurotechnology_Nffv_Nffv
 * Method:    create0
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_neurotechnology_Nffv_Nffv_create0
  (JNIEnv *, jclass, jstring, jstring, jstring);

/*
 * Class:     com_neurotechnology_Nffv_Nffv
 * Method:    getUsers0
 * Signature: ()[J
 */
JNIEXPORT jlongArray JNICALL Java_com_neurotechnology_Nffv_Nffv_getUsers0
  (JNIEnv *, jclass);

/*
 * Class:     com_neurotechnology_Nffv_Nffv
 * Method:    getUserByID0
 * Signature: (I)J
 */
JNIEXPORT jlong JNICALL Java_com_neurotechnology_Nffv_Nffv_getUserByID0
  (JNIEnv *, jclass, jint);

/*
 * Class:     com_neurotechnology_Nffv_Nffv
 * Method:    removeUser0
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_neurotechnology_Nffv_Nffv_removeUser0
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_neurotechnology_Nffv_Nffv
 * Method:    removeUserID0
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_com_neurotechnology_Nffv_Nffv_removeUserID0
  (JNIEnv *, jclass, jint);

/*
 * Class:     com_neurotechnology_Nffv_Nffv
 * Method:    removeUsers0
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_neurotechnology_Nffv_Nffv_removeUsers0
  (JNIEnv *, jclass);

/*
 * Class:     com_neurotechnology_Nffv_Nffv
 * Method:    verify0
 * Signature: (JILcom/neurotechnology/Nffv/Nffv;)I
 */
JNIEXPORT jint JNICALL Java_com_neurotechnology_Nffv_Nffv_verify0
  (JNIEnv *, jclass, jlong, jint, jobject);

/*
 * Class:     com_neurotechnology_Nffv_Nffv
 * Method:    enroll0
 * Signature: (ILcom/neurotechnology/Nffv/Nffv;)J
 */
JNIEXPORT jlong JNICALL Java_com_neurotechnology_Nffv_Nffv_enroll0
  (JNIEnv *, jclass, jint, jobject);

/*
 * Class:     com_neurotechnology_Nffv_Nffv
 * Method:    getQualityThreshold0
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_neurotechnology_Nffv_Nffv_getQualityThreshold0
  (JNIEnv *, jclass);

/*
 * Class:     com_neurotechnology_Nffv_Nffv
 * Method:    setQualityThreshold0
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_com_neurotechnology_Nffv_Nffv_setQualityThreshold0
  (JNIEnv *, jclass, jint);

/*
 * Class:     com_neurotechnology_Nffv_Nffv
 * Method:    getMatchingThreshold0
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_neurotechnology_Nffv_Nffv_getMatchingThreshold0
  (JNIEnv *, jclass);

/*
 * Class:     com_neurotechnology_Nffv_Nffv
 * Method:    setMatchingThreshold0
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_com_neurotechnology_Nffv_Nffv_setMatchingThreshold0
  (JNIEnv *, jclass, jint);

/*
 * Class:     com_neurotechnology_Nffv_Nffv
 * Method:    free0
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_neurotechnology_Nffv_Nffv_free0
  (JNIEnv *, jclass);

/*
 * Class:     com_neurotechnology_Nffv_Nffv
 * Method:    getMaxUserCount
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_neurotechnology_Nffv_Nffv_getMaxUserCount
  (JNIEnv *, jclass);

#ifdef __cplusplus
}
#endif
#endif
